#!/bin/bash

############################################################################################################
# Patch Instructions
# vaspFS.5.3-patch-1.0.1.sh
# created by Sheng Zhang, Institute of Physics, Chinese Academy of Sciences
# compile the script vaspFS.5.3
# step 1: copy the folder vasp.5.3 and the folder vasp.5.lib in the same folder as this script
# step 2: compile vasp.5.lib
# step 3: create and revise makefile in vasp.5.3 so that vasp.5.3 can be compiled successfully (no need to compile)
# step 4: run this patch: bash vaspFS.5.3-patch-1.0.1.sh
# After these steps, wait a few miniutes and then if "Finishing installing vaspFS!" is shown on the shell
# then vaspFS is compiled successfully.
############################################################################################################

# begin
set -e

# content in vp_fermi_f90
vp_fermi_f90=$(cat <<EOF
program main
     implicit none

! constant parameters
     integer, parameter :: dp = kind(1.0d0)
     integer, parameter :: mytmp = 1000,myout=547,mylen=548
     real(dp), parameter:: pi=3.141592653589793d0 

character(len=20)      :: fst
character(len=20)      :: string
character(len=5)      :: tmps
! loop index over row and column
     integer :: i,j,k,it,i2,j2,k2

     integer :: irow
     integer :: jcol

     integer :: nrow
     integer :: ncol

     integer :: nconb

     integer  :: itmp
     integer  :: ityp
     integer  :: kmesh,ISPIN,NKPTS,NKPX,NKPY,NKPZ,NKFS
     real(dp) :: kval, Efermi,a,korg(3),pa(3),pb(3),pc(3),pra(3),prb(3),prc(3)
     real(dp) :: tmp1, tmp2, tmp3, tmp4
     real(dp) :: ktmp1, ktmp2, ktmp3, ktmp4
     real(dp) :: volumn,t

     real(dp), allocatable :: NIBZK(:)

     real(dp), allocatable :: fdata(:,:, :)

     integer , allocatable :: NCHTS(:),KBZFS(:)

     logical :: exists
     character(15):: str15

     str15='EFERMI'
     inquire(file=str15,exist=exists)
     IF( exists .eqv. .false.)  then
         STOP "ERROR: the file EFERMI is missing!!!"
     ENDIF

     str15='FKPCAR'
     inquire(file=str15,exist=exists)
     IF( exists .eqv. .false.)  then
         STOP "ERROR: the file FKPCAR is missing, which is generated by vasp_FS with 'IBRION=8' !!!"
     ENDIF


     Efermi=0.0d0
     open( mytmp, file="EFERMI", status="old" )
        read(mytmp, *) Efermi 
        read(mytmp, *) ISPIN
     close(mytmp)

     open( mylen, file="CONTCAR",status="old")

     read(mylen,*)
     read(mylen,*)  a
     read(mylen,*)  pa 
     read(mylen,*)  pb 
     read(mylen,*)  pc 
     pa=a*pa
     pb=a*pb
     pc=a*pc
     write(*,*) ' Primitive Cell '
     write(*,'(A8,3(F15.8,2X))') 'pa_xyz=',pa
     write(*,'(A8,3(F15.8,2X))') 'pb_xyz=',pb
     write(*,'(A8,3(F15.8,2X))') 'pc_xyz=',pc

     volumn =  pa(1)*(pb(2)*pc(3)-pb(3)*pc(2)) &
             + pa(2)*(pb(3)*pc(1)-pb(1)*pc(3)) &
             + pa(3)*(pb(1)*pc(2)-pb(2)*pc(1))

      t=2.0d0*pi/volumn
     
     pra(1)=t*(pb(2)*pc(3)-pb(3)*pc(2))
     pra(2)=t*(pb(3)*pc(1)-pb(1)*pc(3))
     pra(3)=t*(pb(1)*pc(2)-pb(2)*pc(1))
     
     prb(1)=t*(pc(2)*pa(3)-pc(3)*pa(2))
     prb(2)=t*(pc(3)*pa(1)-pc(1)*pa(3))
     prb(3)=t*(pc(1)*pa(2)-pc(2)*pa(1))
     
     prc(1)=t*(pa(2)*pb(3)-pa(3)*pb(2))
     prc(2)=t*(pa(3)*pb(1)-pa(1)*pb(3))
     prc(3)=t*(pa(1)*pb(2)-pa(2)*pb(1))
 
 ! Cartesian Coordinate System for Primitive Riciprocal Cell 
     write(*,*) ' Primitive Riciprocal Cell '
     write(*,'(A9,3(F15.8,2X))') 'pra_xyz=',pra
     write(*,'(A9,3(F15.8,2X))') 'prb_xyz=',prb
     write(*,'(A9,3(F15.8,2X))') 'prc_xyz=',prc
     close(mylen)

     open( mytmp, file="EIGENVAL", status="old" )
     do irow=1,5
         read(mytmp, *)
     enddo
     read(mytmp, *) itmp, ncol,nrow
     allocate( NIBZK(ncol) )
     allocate( fdata(ISPIN,nrow, ncol) )

     kval  = 0.0d0
     fdata = 0.0d0

      do jcol=1,ncol
         read(mytmp, *)
         read(mytmp, *) tmp1, tmp2, tmp3, tmp4
         do irow=1,nrow
             read(mytmp, *) tmps, fdata(:,irow, jcol)
         enddo
     enddo
     close(mytmp)

     open( mytmp, file="FKPCAR", status="old" )
         READ(mytmp,*) NKPTS,NKPX,NKPY,NKPZ
         allocate( NCHTS(NKPTS) );  NCHTS=0
         READ(mytmp,*) NCHTS(1),korg(:)
         do jcol=2,NKPTS
         READ(mytmp,*) NCHTS(jcol)
         IF(NCHTS(jcol) .gt. ncol )  STOP "Error: NKPTS: NIBZK "
         enddo
     close(mytmp)

    !   it=1
    !do i=0,NKPX 
    !do j=0,NKPY 
    !do k=0,NKPZ 
    !   write(*,"(1000I6)") it, i,j,k, (i*(NKPY+1)+j)*(NKPZ+1)+k+1
    !   it=it+1
    !enddo
    !enddo
    !enddo

    !   it=1
    !do i=0,NKPX-1
    !do j=0,NKPY-1 
    !do k=0,NKPZ-1
    !   write(*,"(1000I6)") it, i,j,k, (i*NKPY+j)*NKPZ+k+1
    !   it=it+1
    !enddo
    !enddo
    !enddo

     NKFS=(NKPX+1)*(NKPY+1)*(NKPZ+1)
     allocate( KBZFS(NKFS ));  KBZFS=0

        it=1
     do i=0,NKPX 
     do j=0,NKPY 
     do k=0,NKPZ 
        i2=mod(i,NKPX);j2=mod(j,NKPY);k2=mod(k,NKPZ)
       !write(*,"(1000I6)") it, i,j,k,  (i*(NKPY+1)+j)*(NKPZ+1)+k+1,i2,j2,k2,(i2*NKPY+j2)*NKPZ+k2+1
        KBZFS(it)=NCHTS( (i2*NKPY+j2)*NKPZ+k2+1 )
        it=it+1
     enddo
     enddo
     enddo

! export data
     kmesh=0
     write(*,*) "writing FS3D.dat!!!"
     open (myout,file="bands.fermi.bxsf")

     write(myout,*) 'BEGIN_INFO'
     write(myout,"(A16,F13.6)") '   Fermi Energy:', 0.d0
     write(myout,*) 'END_INFO'
     write(myout,*) 'BEGIN_BLOCK_BANDGRID_3D'
     write(myout,*) 'band_energies'
     write(myout,*) 'BANDGRID_3D_BANDS'
     write(myout,"(I3)")    ISPIN*nrow
     write(myout,'(3I4)')  NKPX+1,NKPY+1,NKPZ+1
     write(myout,'(3F10.6)') korg(:) 
     write(myout,'(3F10.6)') pra 
     write(myout,'(3F10.6)') prb
     write(myout,'(3F10.6)') prc 

     nconb=0
     IF(nconb==0) THEN
        DO irow=1,nrow
         IF( fdata(1,irow,NCHTS(1))-Efermi .gt.0.1d-2) THEN
           nconb=irow
           EXIT
         ENDIF
        ENDDO
     ENDIF
     do irow=1,nrow
     write(myout,"(A6,I5)")  ' BAND:',irow
     write(myout,"(6e13.6)")  (fdata(1,irow,KBZFS(jcol))-Efermi,jcol=1,NKFS)
      IF(irow==nconb) THEN
         t=1.d0
        do jcol=1,ncol
        IF( fdata(1,irow,jcol)- fdata(1,irow-1,jcol) .lt. t+0.1d-4  ) THEN
         t= fdata(1,irow,jcol)- fdata(1,irow-1,jcol) 
         write(*,"(A,3I5,3F12.6)")'ibktn,nconb,gap:',jcol,nconb-1,nconb,fdata(1,irow-1,jcol),fdata(1,irow,jcol),t
        ENDIF
        enddo
      ENDIF
     enddo
     if( ISPIN == 2)  then
     do irow=1,nrow
     write(myout,"(A6,I5)")  ' BAND:',irow+nrow
     write(myout,"(6e13.6)")  (fdata(2,irow,KBZFS(jcol))-Efermi,jcol=1,NKFS)
     enddo
     endif

     write(myout,*)  'END_BANDGRID_3D'
     write(myout,*)  'END_BLOCK_BANDGRID_3D'

     close(myout)

     deallocate(NIBZK,fdata,NCHTS,KBZFS)

     stop
end program main

EOF
)

mkpoints_full_rv1=$(cat <<EOF
  REAL(q),ALLOCATABLE,SAVE :: KPOINTS_wzj(:,:)
  INTEGER,ALLOCATABLE,SAVE :: KCHARTS_wzj(:)


EOF
)

mkpoints_full_rv2=$(cat <<EOF

      ALLOCATE(KPOINTS_wzj(3,NKTMP)) 
      ALLOCATE(KCHARTS_wzj(NKTMP)) 

EOF
)

mkpoints_full_rv3=$(cat <<EOF
      !---add by zjwang 1.3.14 E-mail:watson.wzj@gmail.com
      IF (IU6>=0) THEN
        !WRITE(IU6,'(A)') ' '
        !WRITE(IU6,'(A)') ' Subroutine IBZKPT_HF returns following result:'
        !WRITE(IU6,'(A)') ' =============================================='
        !WRITE(IU6,'(A)') ' '
        !WRITE(IU6,'(A,I6,A)') ' Found ',NKTMP,' k-points in 1st BZ'
        !WRITE(IU6,'(A,I6,A)') ' the following ',KPOINTS_F%NKPTS,' k-points will be used (e.g. in the exchange kernel)'
        !WRITE(IU6,'(A)') ' Following reciprocal coordinates:   # in IRBZ'

          KPOINTS_wzj(:,:)=KPOINTS_F%VKPT(:,:)
         DO N1=1,KPOINTS_F%NKPTS
          KCHARTS_wzj(N1)=N1
          DO N2=1,3
          IF(KPOINTS_wzj(N2,N1) .lt. -TINY) KPOINTS_wzj(N2,N1)=KPOINTS_wzj(N2,N1)+1._q
          ENDDO
         ENDDO

         DO N1=1,3
         DO N2=1,KPOINTS_F%NKPTS
            V=KPOINTS_wzj(:,N2)
   LOOPW:DO N3=N2+1,KPOINTS_F%NKPTS
            DO NZ=1,N1-1
            IF(abs(KPOINTS_wzj(NZ,N3)-KPOINTS_wzj(NZ,N2)) > TINY )  CYCLE LOOPW
            ENDDO
            IF(KPOINTS_wzj(N1,N3).lt.KPOINTS_wzj(N1,N2)) THEN
              V(:)=KPOINTS_wzj(:,N2); NW=KCHARTS_wzj(N2)
              KPOINTS_wzj(:,N2)=KPOINTS_wzj(:,N3); KCHARTS_wzj(N2)=KCHARTS_wzj(N3)
              KPOINTS_wzj(:,N3)=V(:);KCHARTS_wzj(N3)=NW
            ENDIF
         ENDDO LOOPW
         ENDDO
         ENDDO

         OPEN(UNIT=332,FILE='FKPCAR',STATUS='UNKNOWN')
               WRITE(332,'(5I4)') &
                 KPOINTS_F%NKPTS,KPOINTS_F%NKPX,KPOINTS_F%NKPY,KPOINTS_F%NKPZ
         DO N1=1,KPOINTS_F%NKPTS
            N2=KCHARTS_wzj(N1)
             ! WRITE(IU6,'(3F10.6,4X,I4," t-inv ",L1)') &
             !      KPOINTS_F%VKPT(1,N2), &
             !      KPOINTS_F%VKPT(2,N2), &
             !      KPOINTS_F%VKPT(3,N2),KPOINTS_F%NEQUIV(N2),KPOINTS_F%LINV(N2)

               WRITE(332,'(I4,3F10.6,4X," t-inv ",L1)') &
                    KPOINTS_F%NEQUIV(N2),KPOINTS_F%VKPT(1,N2), &
                    KPOINTS_F%VKPT(2,N2), &
                    KPOINTS_F%VKPT(3,N2),KPOINTS_F%LINV(N2)
         ENDDO
         CLOSE(332)
         STOP
      ENDIF
      !---add by zjwang 1.3.14 E-mail:watson.wzj@gmail.com

EOF
)
##############################################################################
# begin

# judge if vasp2FS.5.3 already exists
if [ -d "vaspFS.5.3" ]; then
    echo "The file folder 'vaspFS.5.3' already exists, if you continue the installation, this folder will be deleted. Do you want to continue? [y/n]"
    read flag
    while [ 0 ]; do
        if [ "$flag" == "n" ] || [ "$flag" == "N" ]; then
            exit
        elif [ "$flag" == "y" ] || [ "$flag" == "Y" ]; then
            rm -rf vaspFS.5.3
            break
        else
            read flag
        fi
    done
fi

# prepare the files
mkdir vaspFS.5.3
cd vaspFS.5.3

ln -sf ../vasp.5.3/*.F ./
ln -sf ../vasp.5.3/*.inc ./

# revise mkpoints_full.F
unlink mkpoints_full.F
cp ../vasp.5.3/mkpoints_full.F ./
# create vp_fermi.f90
echo "$vp_fermi_f90" > vp_fermi.f90
line_number=$(grep -n "REAL(q),ALLOCATABLE,SAVE :: WEIGHT_K_POINT_PAIR_SMALL_GROUP(:,:)" "mkpoints_full.F" | sed -n 's/^\([0-9]\+\):.*$/\1/p')
if [ -z "$line_number" ]; then
    echo "Error: cannot find the right line in mkpoints_full.F!!!"
    exit
fi

sed -i "${line_number}r /dev/stdin" mkpoints_full.F <<< "$mkpoints_full_rv1"

line_number=$(grep -n "INTEGER N1, N2, N3" "mkpoints_full.F" | sed -n 's/^\([0-9]\+\):.*$/\1/p')
if [ -z "$line_number" ]; then
    echo "Error: cannot find the right line in mkpoints_full.F!!!"
    exit
fi

sed -i "${line_number}r /dev/stdin" mkpoints_full.F <<< "      INTEGER NW,NZ"

line_number=$(grep -n "KPOINTS_F%NKPTS=NKTMP" "mkpoints_full.F" | sed -n 's/^\([0-9]\+\):.*$/\1/p')
if [ -z "$line_number" ]; then
    echo "Error: cannot find the right line in mkpoints_full.F!!!"
    exit
fi

sed -i "${line_number}r /dev/stdin" mkpoints_full.F <<< "$mkpoints_full_rv2"

line_number=$(grep -n "DEALLOCATE(K_TMP%VKPT, K_TMP%TRANS, K_TMP%LSHIFT, K_TMP%SPINFLIP, &" "mkpoints_full.F" | sed -n 's/^\([0-9]\+\):.*$/\1/p')
if [ -z "$line_number" ]; then
    echo "Error: cannot find the right line in mkpoints_full.F!!!"
    exit
fi

line_number=$(expr $line_number - 1)
sed -i "${line_number}r /dev/stdin" mkpoints_full.F <<< "$mkpoints_full_rv3"


# revise makefile
if [ -e "../vasp.5.3/makefile" ]; then
  makefile="makefile"
elif [ -e "../vasp.5.3/Makefile" ]; then
  makefile="Makefile"
else
  echo "File 'Makefile' not exists in vasp.5.3!"
  exit
fi
cp ../vasp.5.3/$makefile ./
line_number=$(grep -n "makeparam:" "$makefile" | sed -n 's/^\([0-9]\+\):.*$/\1/p')
if [ -z "$line_number" ]; then
    echo "Error: cannot find the right line in $makefile!!!"
    exit
fi

line_number=$(expr $line_number - 1)
sed -i "${line_number}r /dev/stdin" $makefile <<< "$(printf '\t$(FCL) -o vp_fermi vp_fermi.f90')"

sed -i 's/-o vasp \(.*\)/-o vaspFS \1/' $makefile

echo "Finish modifying vasp into vaspFS!"
echo "vaspFS source file is in the file folder vaspFS.5.3, do you want to compile it right now? [y/n]"

# ask if the user want to compile vaspFS right now
read flag_2
while [ 0 ]; do
    if [ "$flag_2" == "n" ] || [ "$flag_2" == "N" ]; then
        cd ..
        exit
    elif [ "$flag_2" == "y" ] || [ "$flag_2" == "Y" ]; then
        echo "Begin compiling vaspFS!"
        break
    else
        read flag_2
    fi
done

# begin compiling
make

# path of the file folder of vaspFS
current_path=$(pwd)

cd ..

# print the path
echo " "
echo "Finishing installing vaspFS!"
echo "The path of vaspFS: $current_path/vaspFS"
